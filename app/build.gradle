apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'

android {
    compileSdkVersion rootProject.targetSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.example.yen.imdb"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "FORMAT_JSON", "\"json\""
        buildConfigField "String", "LANGUAGE", "\"en-us\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "consumer"

    productFlavors {
        def baseURL = "\"https://www.myapifilms.com/imdb/\""
        def timeoutInSec = "60"

        dev {
            dimension "consumer"
            applicationIdSuffix ".dev"

            timeoutInSec = "90"

            buildConfigField "String", "BASE_URL", baseURL
            buildConfigField "int", "TIMEOUT_IN_SEC", timeoutInSec

        }

        prod {
            dimension "consumer"
            applicationIdSuffix ".prod"

            buildConfigField "String", "BASE_URL", baseURL
            buildConfigField "int", "TIMEOUT_IN_SEC", timeoutInSec
        }
    }

    signingConfigs {
        // make your own key for release build
        release {
            storeFile file("./keystore/sample.jks")
            storePassword "sample"
            keyAlias "sample"
            keyPassword "sample"
        }
    }

    buildTypes {
        debug {
            buildConfigField "okhttp3.logging.HttpLoggingInterceptor.Level", "HTTP_LOG_LEVEL",
                    "okhttp3.logging.HttpLoggingInterceptor.Level.BODY"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        warningsAsErrors false
        checkReleaseBuilds true
        abortOnError true
        lintConfig file("$project.rootDir/config/quality/lint/lint.xml")

        disable 'GoogleAppIndexingWarning' // App does not have deep linking.
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK.
    }

    packagingOptions {
        exclude('META-INF/LICENSE')
        exclude('META-INF/NOTICE')
    }

    // Ignore leakcanary for unit tests
    configurations.all { config ->
        if (config.name.contains('UnitTest')) {
            config.resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                    details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"

    implementation "android.arch.lifecycle:extensions:$LIFECYCLE_VERSION"
    implementation "android.arch.lifecycle:common-java8:$LIFECYCLE_VERSION"

    implementation "com.google.dagger:dagger:$DAGGER2_VERSION"
    annotationProcessor "com.google.dagger:dagger-compiler:$DAGGER2_VERSION"

    implementation "com.squareup.retrofit2:retrofit:$RETROFIT2_VERSION"
    implementation "com.squareup.retrofit2:converter-moshi:$RETROFIT2_VERSION"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$RETROFIT2_VERSION"

    implementation "io.reactivex.rxjava2:rxjava:$RXJAVA_VERSION"
    implementation "io.reactivex.rxjava2:rxandroid:$RXANDROID_VERSION"

    implementation "com.github.bumptech.glide:okhttp3-integration:$GLIDE_VERSION"
    implementation "com.github.bumptech.glide:glide:$GLIDE_VERSION"
    annotationProcessor "com.github.bumptech.glide:compiler:$GLIDE_VERSION"

    implementation "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"
    annotationProcessor "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"
    // Debug
    debugImplementation "com.squareup.okhttp3:logging-interceptor:$OKHTTP3_VERSION"
    debugImplementation "com.facebook.stetho:stetho:$STETHO_VERSION"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:$STETHO_VERSION"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$LEAKCANARY_VERSION"
    // Release
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$LEAKCANARY_VERSION"
    // Unit test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.5'
    testImplementation 'org.mockito:mockito-core:1.10.19'
}